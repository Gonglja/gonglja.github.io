<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>va_list系列的使用及问题</title>
      <link href="/posts/608e8634"/>
      <url>/posts/608e8634</url>
      
        <content type="html"><![CDATA[<img src="https://" alt="" style="width:100%"> <h2 id="va-list"><a href="#va-list" class="headerlink" title="va_list"></a>va_list</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><blockquote><p>引自 <a href="https://www.runoob.com/cprogramming/c-standard-library-stdarg-h.html">https://www.runoob.com/cprogramming/c-standard-library-stdarg-h.html</a></p></blockquote><p><strong>stdarg.h</strong> 头文件定义了一个变量类型 <strong>va_list</strong> 和三个宏，这三个宏可用于在参数个数未知（即参数个数可变）时获取函数中的参数。</p><p>可变参数的函数通在参数列表的末尾是使用省略号(,…)定义的。</p><h4 id="库变量"><a href="#库变量" class="headerlink" title="库变量"></a>库变量</h4><p>下面是头文件 stdarg.h 中定义的变量类型：</p><table><thead><tr><th align="left">序号</th><th align="left">变量 &amp; 描述</th></tr></thead><tbody><tr><td align="left">1</td><td align="left"><strong>va_list</strong> 这是一个适用于 <strong>va_start()、va_arg()</strong> 和 <strong>va_end()</strong> 这三个宏存储信息的类型。</td></tr></tbody></table><h4 id="库宏"><a href="#库宏" class="headerlink" title="库宏"></a>库宏</h4><p>下面是头文件 stdarg.h 中定义的宏：</p><table><thead><tr><th align="left">序号</th><th align="left">宏 &amp; 描述</th></tr></thead><tbody><tr><td align="left">1</td><td align="left"><a href="https://www.runoob.com/cprogramming/c-macro-va_start.html">void va_start(va_list ap, last_arg)</a> 这个宏初始化 <strong>ap</strong> 变量，它与 <strong>va_arg</strong> 和 <strong>va_end</strong> 宏是一起使用的。<strong>last_arg</strong> 是最后一个传递给函数的已知的固定参数，即省略号之前的参数。</td></tr><tr><td align="left">2</td><td align="left"><a href="https://www.runoob.com/cprogramming/c-macro-va_arg.html">type va_arg(va_list ap, type)</a> 这个宏检索函数参数列表中类型为 <strong>type</strong> 的下一个参数。</td></tr><tr><td align="left">3</td><td align="left"><a href="https://www.runoob.com/cprogramming/c-macro-va_end.html">void va_end(va_list ap)</a> 这个宏允许使用了 <strong>va_start</strong> 宏的带有可变参数的函数返回。如果在从函数返回之前没有调用 <strong>va_end</strong>，则结果为未定义。</td></tr></tbody></table><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdarg.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">(<span class="keyword">int</span> p1, ...)</span></span>{</span><br><span class="line">    va_list ap;</span><br><span class="line">    <span class="keyword">int</span> a = p1;</span><br><span class="line">    va_start(ap, p1);</span><br><span class="line">    <span class="keyword">double</span> b = va_arg(ap,<span class="keyword">double</span>);</span><br><span class="line">    <span class="keyword">char</span> c  = va_arg(ap,<span class="keyword">int</span>);</span><br><span class="line">    <span class="keyword">char</span> *d = va_arg(ap,<span class="keyword">char</span> *);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"a:%d\r\nb:%lf\r\nc:%d\r\nd:%s\r\n"</span>,a,b,c,d);</span><br><span class="line">    va_end(ap);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">double</span> b = <span class="number">2.2</span>;</span><br><span class="line">    <span class="keyword">char</span> c = <span class="number">0x33</span>;</span><br><span class="line">    <span class="keyword">char</span> *d = <span class="string">"abcderf"</span>;</span><br><span class="line">    test(a,b,c,d);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>将上述代码保存为test.c，使用命令 <code>gcc test.c </code>然后 <code>./a.out</code>执行</p><p>正常输出</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a:1</span><br><span class="line">b:2.200000</span><br><span class="line">c:51</span><br><span class="line">d:abcderf</span><br></pre></td></tr></tbody></table></figure><h3 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h3><p>第一次写的代码为以下，编译时爆出几个警告，刚开始没注意，后面运行时发现<code>core dumped.</code> 遂回头查产生改现象的原因。</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdarg.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">(<span class="keyword">int</span> p1, ...)</span></span>{</span><br><span class="line">    va_list ap;</span><br><span class="line">    <span class="keyword">int</span> a = p1;</span><br><span class="line">    va_start(ap, p1);</span><br><span class="line">    <span class="keyword">float</span> b = va_arg(ap,<span class="keyword">float</span>);</span><br><span class="line">    <span class="keyword">char</span> c  = va_arg(ap,<span class="keyword">char</span>);</span><br><span class="line">    <span class="keyword">char</span> *d = va_arg(ap,<span class="keyword">char</span> *);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"a:%d\r\nb:%lf\r\nc:%d\r\nd:%s\r\n"</span>,a,b,c,d);</span><br><span class="line">    va_end(ap);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">float</span> b = <span class="number">2.2</span>;</span><br><span class="line">    <span class="keyword">char</span> c = <span class="number">0x33</span>;</span><br><span class="line">    <span class="keyword">char</span> *d = <span class="string">"abcderf"</span>;</span><br><span class="line">    test(a,b,c,d);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>我们注意到有两个warning，翻译一下：当通过<code>...</code>时，<code>float</code>被提升为<code>double</code>，另一个也是类似，<code>char</code> 被提升为<code>int</code>，<strong>所以使用<code>va_arg</code>访问时，传入参数类型为<code>char</code>，需要用<code>va_arg(ap,int)</code>；传入参数为<code>float</code>时，需使用<code>va_arg(arg,double)</code></strong> 。</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[gonglja@archlinux hurlex-doc]$ gcc -g0 test.c </span><br><span class="line">In file included from test.c:2:</span><br><span class="line">test.c: In function ‘test’:</span><br><span class="line">test.c:8:25: warning: ‘float’ is promoted to ‘double’ when passed through ‘...’</span><br><span class="line">    8 |     float b = va_arg(ap,float);</span><br><span class="line">      |                         ^</span><br><span class="line">test.c:8:25: note: (so you should pass ‘double’ not ‘float’ to ‘va_arg’)</span><br><span class="line">test.c:8:25: note: if this code is reached, the program will abort</span><br><span class="line">test.c:9:25: warning: ‘char’ is promoted to ‘int’ when passed through ‘...’</span><br><span class="line">    9 |     char c  = va_arg(ap,char);</span><br><span class="line">      |                         ^</span><br><span class="line">test.c:9:25: note: if this code is reached, the program will abort</span><br><span class="line">[gonglja@archlinux hurlex-doc]$ ./a.out </span><br><span class="line">Illegal instruction (core dumped)</span><br><span class="line">[gonglja@archlinux hurlex-doc]$ </span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>修改后，程序正常运行。</p><p>为什么 当通过<code>...</code>时，<code>float</code>被提升为<code>double</code>？<code>char</code> 提升为<code>int</code>呢？<del>==猜测是由于字节对齐引起的==</del>。</p><p>为了验证我们的猜测，在这个地方，我们看一下汇编代码，</p><p>由于涉及到浮点数，为了简单，我们简化一下代码，去掉浮点数相关。</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdarg.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">(<span class="keyword">int</span> p1, ...)</span></span>{</span><br><span class="line">    va_list ap;</span><br><span class="line">    <span class="keyword">int</span> a = p1;</span><br><span class="line">    va_start(ap, p1);</span><br><span class="line">    <span class="keyword">char</span> c  = va_arg(ap,<span class="keyword">char</span>);<span class="comment">// 此处存在问题，应改为va_arg(ap,int)</span></span><br><span class="line">    <span class="keyword">char</span> *d = va_arg(ap,<span class="keyword">char</span> *);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"a:%d\r\nc:%d\r\nd:%s\r\n"</span>,a,c,d);</span><br><span class="line">    va_end(ap);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">char</span> c = <span class="number">51</span>;</span><br><span class="line">    <span class="keyword">char</span> *d = <span class="string">"abcderf"</span>;</span><br><span class="line">    test(a,c,d);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>通过 <code>gcc -S test.c</code> 生成 <code>test.s</code>文件，汇编源码如下</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line">.file"test.c"</span><br><span class="line">.text</span><br><span class="line">.globltest</span><br><span class="line">.typetest, @function</span><br><span class="line">test:</span><br><span class="line">.LFB0:</span><br><span class="line">.cfi_startproc</span><br><span class="line">pushq%rbp</span><br><span class="line">.cfi_def_cfa_offset 16</span><br><span class="line">.cfi_offset 6, -16</span><br><span class="line">movq%rsp, %rbp</span><br><span class="line">.cfi_def_cfa_register 6</span><br><span class="line">subq$120, %rsp</span><br><span class="line">movl%edi, -228(%rbp)</span><br><span class="line">movq%rsi, -168(%rbp)</span><br><span class="line">movq%rdx, -160(%rbp)</span><br><span class="line">movq%rcx, -152(%rbp)</span><br><span class="line">movq%r8, -144(%rbp)</span><br><span class="line">movq%r9, -136(%rbp)</span><br><span class="line">testb%al, %al</span><br><span class="line">je.L2</span><br><span class="line">movaps%xmm0, -128(%rbp)</span><br><span class="line">movaps%xmm1, -112(%rbp)</span><br><span class="line">movaps%xmm2, -96(%rbp)</span><br><span class="line">movaps%xmm3, -80(%rbp)</span><br><span class="line">movaps%xmm4, -64(%rbp)</span><br><span class="line">movaps%xmm5, -48(%rbp)</span><br><span class="line">movaps%xmm6, -32(%rbp)</span><br><span class="line">movaps%xmm7, -16(%rbp)</span><br><span class="line">.L2:</span><br><span class="line">movq%fs:40, %rax</span><br><span class="line">movq%rax, -184(%rbp)</span><br><span class="line">xorl%eax, %eax</span><br><span class="line">movl-228(%rbp), %eax</span><br><span class="line">movl%eax, -212(%rbp)</span><br><span class="line">movl$8, -208(%rbp)</span><br><span class="line">movl$48, -204(%rbp)</span><br><span class="line">leaq16(%rbp), %rax</span><br><span class="line">movq%rax, -200(%rbp)</span><br><span class="line">leaq-176(%rbp), %rax</span><br><span class="line">movq%rax, -192(%rbp)</span><br><span class="line">ud2</span><br><span class="line">.cfi_endproc</span><br><span class="line">.LFE0:</span><br><span class="line">.sizetest, .-test</span><br><span class="line">.section.rodata</span><br><span class="line">.LC0:</span><br><span class="line">.string"abcderf"</span><br><span class="line">.text</span><br><span class="line">.globlmain</span><br><span class="line">.typemain, @function</span><br><span class="line">main:</span><br><span class="line">.LFB1:</span><br><span class="line">.cfi_startproc</span><br><span class="line">pushq%rbp</span><br><span class="line">.cfi_def_cfa_offset 16</span><br><span class="line">.cfi_offset 6, -16</span><br><span class="line">movq%rsp, %rbp</span><br><span class="line">.cfi_def_cfa_register 6</span><br><span class="line">subq$16, %rsp</span><br><span class="line">movl$1, -12(%rbp)</span><br><span class="line">movb$51, -13(%rbp)</span><br><span class="line">leaq.LC0(%rip), %rax</span><br><span class="line">movq%rax, -8(%rbp)</span><br><span class="line">movsbl-13(%rbp), %ecx</span><br><span class="line">movq-8(%rbp), %rdx</span><br><span class="line">movl-12(%rbp), %eax</span><br><span class="line">movl%ecx, %esi</span><br><span class="line">movl%eax, %edi</span><br><span class="line">movl$0, %eax</span><br><span class="line">calltest</span><br><span class="line">movl$0, %eax</span><br><span class="line">leave</span><br><span class="line">.cfi_def_cfa 7, 8</span><br><span class="line">ret</span><br><span class="line">.cfi_endproc</span><br><span class="line">.LFE1:</span><br><span class="line">.sizemain, .-main</span><br><span class="line">.ident"GCC: (GNU) 11.2.0"</span><br><span class="line">.section.note.GNU-stack,"",@progbits</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>只关注重点地方代码，test调用之前，test调用之后。</p><p>找到 call test ，在call test之前，</p><p>rdi中存着第一个参数，值为1</p><p>rsi中存着第二个参数，值为2</p><p>rdx中存着第三个参数，值为字符串 的地址</p><p><img src="https://gitee.com/glj0/imgur/raw/master/photo/20220223165128.png"></p><p>接着调用<code>call test</code>，跳转至<code>test</code>中，首先保存<code>rbp</code>寄存器，更新<code>rbp</code>指针为<code>rsp</code>（栈顶指针），接着栈顶下移（分配空间），将<code>edi</code>、<code>rsi</code>、<code>rax</code>、<code>rcx</code>、<code>r8</code>、<code>r9</code>保存到栈区。为什么是<code>edi</code>呢？因为你的第一个参数为<code>int</code>，而非<code>int64_t</code>。</p><p>继续往下走，<code>test %al,%al</code> 其行为类似and（<code>TEST %SRC, %DEST</code> 目的寄存器与源寄存器进行<strong>逻辑与</strong>操作，其结果不更新目的寄存器），<code>je</code> 如果等于0，跳转。</p><p>继续往下走，<code>FS:0x28</code>在 Linux 上存储一个特殊的哨兵堆栈保护值，并且代码正在执行堆栈保护检查。</p><p>==FS:0x28 之下与 ud2 之前代码未分析。（留个坑）==</p><p>然后后面 执行ud2，UD2是一种让CPU产生invalid opcode exception的软件指令. 内核发现CPU出现这个异常, 会立即停止运行。此时就Core Dumped.</p><p>以上猜测错误。其实是c99标准中的默认参数提升，具体标准如下。</p><p><a href="http://www.open-std.org/JTC1/SC22/wg14/www/docs/n1124.pdf">C99标准</a> 6.5.2.2  函数调用 6、7、8节</p><blockquote><p>6 If the expression that denotes the called function has a type that does not include a prototype, the integer promotions are performed on each argument, and arguments that have type float are promoted to double. These are called the default argument promotions. If the number of arguments does not equal the number of parameters, the behavior is undefined. If the function is defined with a type that includes a prototype, and either the prototype ends with an ellipsis (, …) or the types of the arguments after promotion are not compatible with the types of the parameters, the behavior is undefined. If the function is defined with a type that does not include a prototype, and the types of the arguments after promotion are not compatible with those of the parameters after promotion, the behavior is undefined, except for the following cases:</p><p>​    — one promoted type is a signed integer type, the other promoted type is the corresponding unsigned integer type, and the value is representable in both types; </p><p>​    — both types are pointers to qualified or unqualified versions of a character type or void. </p><p>7 If the expression that denotes the called function has a type that does include a prototype, the arguments are implicitly converted, as if by assignment, to the types of the corresponding parameters, taking the type of each parameter to be the unqualified version of its declared type. The ellipsis notation in a function prototype declarator causes argument type conversion to stop after the last declared parameter. The default argument promotions are performed on trailing arguments. </p><p>8 No other conversions are performed implicitly; in particular, the number and types of arguments are not compared with those of the parameters in a function definition that does not include a function prototype declarator</p></blockquote><blockquote><p>6如果表示被调用函数的表达式具有不包含原型的类型，则对每个参数执行整数提升，并将具有float类型的参数提升为double。这些被称为默认参数提升。如果参数的数量不等于参数的数量，则行为是未定义的。如果函数是用包含原型的类型定义的，并且原型以省略号（，…）结尾或者升级后的参数类型与参数类型不兼容，行为未定义。如果函数定义的类型不包括原型，且升级后参数的类型与升级后参数的类型不兼容，则行为未定义，但以下情况除外：</p><ul><li>一个升级类型是有符号整数类型，另一个升级类型是相应的无符号整数类型，值在两种类型中都可以表示；</li><li>这两种类型都是指向字符类型或void的限定或非限定版本的指针。</li></ul><p>7 如果表示被调用函数的表达式的类型确实包含原型，则参数会像赋值一样隐式转换为相应参数的类型，将每个参数的类型视为其声明类型的非限定版本。函数原型声明器中的省略号表示法会导致参数类型转换在最后一个声明的参数之后停止。默认参数升级是在后续参数上执行的。</p><p>8 没有隐式执行其他转换；特别是，参数的数量和类型不会与不包含函数原型声明器的函数定义中的参数进行比较</p></blockquote><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://stackoverflow.com/questions/1255775/default-argument-promotions-in-c-function-calls">https://stackoverflow.com/questions/1255775/default-argument-promotions-in-c-function-calls</a></p><p><a href="https://blog.csdn.net/astrotycoon/article/details/8284501">https://blog.csdn.net/astrotycoon/article/details/8284501</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> coredumped </tag>
            
            <tag> c </tag>
            
            <tag> assembly </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在Vmware上使用archlinux安装open-vm-tools</title>
      <link href="/posts/b9ab4680"/>
      <url>/posts/b9ab4680</url>
      
        <content type="html"><![CDATA[<h2 id="如何在Archlinux安装open-vm-tools软件"><a href="#如何在Archlinux安装open-vm-tools软件" class="headerlink" title="如何在Archlinux安装open-vm-tools软件"></a>如何在Archlinux安装open-vm-tools软件</h2><h3 id="安装软件主体"><a href="#安装软件主体" class="headerlink" title="安装软件主体"></a>安装软件主体</h3><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S open-vm-tools</span><br></pre></td></tr></tbody></table></figure><p>然后安装软件：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S base-devel net-tools linux-headers asp wget sudo</span><br></pre></td></tr></tbody></table></figure><h3 id="时间同步"><a href="#时间同步" class="headerlink" title="时间同步"></a>时间同步</h3><p>为虚拟机配置时间同步很重要，因为虚拟机比物理机更容易出现时间波动现象。主要原因就在于 CPU 是被共用的。</p><p>有两种方案可以实现实现同步：同步宿主机时间或者用NTP服务。</p><p>与宿主机同步时间<br>保证 vmtoolsd.service 服务处于运行状态<code>systemctl status vmtoolsd.service</code>，然后用如下的命令启用时间同步功能：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vmware-toolbox-cmd timesync enable</span><br></pre></td></tr></tbody></table></figure><p>宿主系统休眠后，用如下的命令来使客机间同步时间：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hwclock --hctosys --localtime</span><br></pre></td></tr></tbody></table></figure><h3 id="窗口分辨率自动适配"><a href="#窗口分辨率自动适配" class="headerlink" title="窗口分辨率自动适配"></a>窗口分辨率自动适配</h3><p>当你拖动Vmware窗口后，Arch会随主窗口的大小来调整分辨率。</p><h4 id="开启3D加速"><a href="#开启3D加速" class="headerlink" title="开启3D加速"></a>开启3D加速</h4><p>VMware 软件：设置 - 显示器 - 选择合适的显存 - 开启加速3D图形</p><h4 id="确认VMware的查看-自动调整大小-自动适应客户机-选择上"><a href="#确认VMware的查看-自动调整大小-自动适应客户机-选择上" class="headerlink" title="确认VMware的查看 - 自动调整大小 - 自动适应客户机 选择上"></a>确认VMware的查看 - 自动调整大小 - 自动适应客户机 选择上</h4><h4 id="安装xf86-video-vmware"><a href="#安装xf86-video-vmware" class="headerlink" title="安装xf86-video-vmware"></a>安装xf86-video-vmware</h4><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S xf86-video-vmware</span><br></pre></td></tr></tbody></table></figure><h4 id="安装gtkmm和gtk2"><a href="#安装gtkmm和gtk2" class="headerlink" title="安装gtkmm和gtk2"></a>安装gtkmm和gtk2</h4><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S gtkmm gtk2</span><br></pre></td></tr></tbody></table></figure><h4 id="添加相关模块"><a href="#添加相关模块" class="headerlink" title="添加相关模块"></a>添加相关模块</h4><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/mkinitcpio.conf</span><br><span class="line">MODULES=(vsock vmw_vsock_vmci_transport vmw_balloon vmw_vmci vmwgfx)</span><br><span class="line"># :wq 保存退出 </span><br></pre></td></tr></tbody></table></figure><p>然后执行</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo mkinitcpio -p linux</span><br></pre></td></tr></tbody></table></figure><h4 id="启动vmtoolsd-service"><a href="#启动vmtoolsd-service" class="headerlink" title="启动vmtoolsd.service"></a>启动<code>vmtoolsd.service</code></h4><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl start vmtoolsd.service</span><br><span class="line">sudo systemctl enable vmtoolsd.service</span><br></pre></td></tr></tbody></table></figure><p>重启就可以了</p><h3 id="拖拽复制粘贴"><a href="#拖拽复制粘贴" class="headerlink" title="拖拽复制粘贴"></a>拖拽复制粘贴</h3><p>open-vm-tools缺少gtkmm，因此无法复制粘贴，手动安装即可。</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S gtkmm</span><br></pre></td></tr></tbody></table></figure><p>参考：<br><a href="https://www.wnark.com/go/aHR0cHM6Ly93aWtpLmFyY2hsaW51eC5vcmcvaW5kZXgucGhwL1ZNd2FyZS9JbnN0YWxsX0FyY2hfTGludXhfYXNfYV9ndWVzdA==">VMware/Install Arch Linux as a guest</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> vmware </tag>
            
            <tag> archlinux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/posts/4a17b156"/>
      <url>/posts/4a17b156</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
